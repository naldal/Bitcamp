package member.dao;

import java.io.IOException;
import java.io.Reader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import member.bean.MemberDTO;
import member.bean.ZipcodeDTO;

public class MemberDAO {
	private static MemberDAO instance;
	private SqlSessionFactory sqlSessionFactory;
	
	public static MemberDAO getInstance() {
		if(instance==null) {
			synchronized(MemberDAO.class) {
				instance = new MemberDAO();
			}
		}
		return instance;
	}
	
	public MemberDAO() {
		try {
			Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
			sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public void memberWrite(MemberDTO memberDTO) {
		SqlSession sqlSession = sqlSessionFactory.openSession();
		sqlSession.insert("memberSQL.memberWrite", memberDTO);
		sqlSession.commit();
		sqlSession.close();
	}
	
	public void isExistId(String id) {
		SqlSession sqlSession = sqlSessionFactory.openSession();
		sqlSession.insert("memberSQL.memberWrite", id);
		sqlSession.commit();
		sqlSession.close();
		
	}
	
	public MemberDTO login(String id, String pwd) {
		Map<String, String> map = new HashMap<String, String>();
		map.put("id", id);
		map.put("pwd", pwd);

		SqlSession sqlSession = sqlSessionFactory.openSession();
		MemberDTO memberDTO = sqlSession.selectOne("memberSQL.login", map);
		return memberDTO;
	}
	
	public List<ZipcodeDTO> getZipcode(String sido, String sigungu, String roadname) {
		List<ZipcodeDTO> list = new ArrayList<ZipcodeDTO>();
		Map<String, String> map = new HashMap<String, String>();
		
		map.put("sido", sido);
		map.put("sigungu", sigungu);
		map.put("roadname", roadname);
		
		SqlSession sqlSession = sqlSessionFactory.openSession();
		list = sqlSession.selectList("memberSQL.getZipcode", map);
		return list;
	}
	
	public MemberDTO getMember(String id) {
		MemberDTO memberDTO1 = new MemberDTO();
		String sql = "select * from member where id=?";
		
		SqlSession sqlSession = sqlSessionFactory.openSession();
		memberDTO1 = sqlSession.selectOne("memberSQL.getMember", id);
		sqlSession.commit();
		sqlSession.close();
		
		if(memberDTO1!=null) { // 이미 로그인을 하고 들어온 상황이므로 if문은 해줘도 안해줘도 된다.				
				MemberDTO memberDTO = new MemberDTO();
				memberDTO.setName(memberDTO1.getName());
				memberDTO.setId(memberDTO1.getId());
				memberDTO.setPwd(memberDTO1.getPwd()); //pwd
				memberDTO.setGender(memberDTO1.getGender()); //gender
				memberDTO.setEmail1(memberDTO1.getEmail1()); //email1
				memberDTO.setEmail2(memberDTO1.getEmail2()); //email2
				memberDTO.setTel1(memberDTO1.getTel1()); //tel1
				memberDTO.setTel2(memberDTO1.getTel2()); //tel2
				memberDTO.setTel3(memberDTO1.getTel3()); //tel3
				memberDTO.setZipcode(memberDTO1.getZipcode()); //zipcode
				memberDTO.setAddr1(memberDTO1.getAddr1()); //addr1
				memberDTO.setAddr2(memberDTO1.getAddr2()); //addr2
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
				try {
					if(rs!=null) rs.close();
					if(pstmt!=null) pstmt.close();
					if(conn!=null) conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
		return memberDTO;
	}
	
	public void modify(MemberDTO memberDTO) {
		
		String sql = "update member set name=?,"
									+ "pwd=?,"
									+ "gender=?,"
									+ "email1=?,"
									+ "email2=?,"
									+ "tel1=?,"
									+ "tel2=?,"
									+ "tel3=?,"
									+ "zipcode=?,"
									+ "addr1=?,"
									+ "addr2=?,"
									+ "logtime=sysdate "
					+ "where id=?";
		
		
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, memberDTO.getName());
			pstmt.setString(2, memberDTO.getPwd());
			pstmt.setString(3, memberDTO.getGender());
			pstmt.setString(4, memberDTO.getEmail1());
			pstmt.setString(5, memberDTO.getEmail2());
			pstmt.setString(6, memberDTO.getTel1());
			pstmt.setString(7, memberDTO.getTel2());
			pstmt.setString(8, memberDTO.getTel3());
			pstmt.setString(9, memberDTO.getZipcode());
			pstmt.setString(10, memberDTO.getAddr1());
		   	pstmt.setString(11, memberDTO.getAddr2());
			pstmt.setString(12, memberDTO.getId());
			
			pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
				try {
					if(pstmt!=null) pstmt.close();
					if(conn!=null) conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
	}
	
}
